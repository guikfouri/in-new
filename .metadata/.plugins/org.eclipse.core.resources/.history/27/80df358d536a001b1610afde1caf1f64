package br.com.seatecnologia.biblioteca.visitors.counter.configuration;

import com.google.api.services.analyticsreporting.v4.AnalyticsReporting;
import com.liferay.portal.configuration.metatype.bnd.util.ConfigurableUtil;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;

import java.io.IOException;
import java.security.GeneralSecurityException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Map;

import org.osgi.service.component.annotations.Activate;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Modified;
import org.osgi.service.component.annotations.Reference;

import br.com.seatecnologia.biblioteca.visitors.counter.service.DailyCounterLocalService;
import br.com.seatecnologia.biblioteca.visitors.counter.web.command.BibliotecaVisitorsCounterWebConfiguration;
import br.com.seatecnologia.biblioteca.visitors.counter.web.portlet.PortalAnalyticsReporting;

@Component(
	configurationPid = "br.com.seatecnologia.portal.visitors.counter.web.configuration.PortalVisitorsCounterWebConfiguration",
    property = {"osgi.command.function=updateCounters", "osgi.command.scope=seatecnologia"},
    service = Object.class
)
public class BibliotecaVisitorsCounterWebCommand {
	public void updateCounters() throws GeneralSecurityException, IOException, PortalException {
		
		try {
	    	PortalAnalyticsReporting portalService = new PortalAnalyticsReporting();
	    	String viewId = _bibliotecaVisitorsCounterWebConfiguration.viewID();
	    	String privateKeyJson = _bibliotecaVisitorsCounterWebConfiguration.privateKeyJSON();
	    	
	    	AnalyticsReporting service = portalService.initializeAnalyticsReporting(privateKeyJson);
	    	
			DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			Calendar cal = Calendar.getInstance();
			cal.add(Calendar.DAY_OF_MONTH, -1);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 59);
			cal.set(Calendar.SECOND, 59);
			
			String endDate = sdf.format(cal.getTime());
			
			String month = String.valueOf(cal.get(Calendar.MONTH));
			String year = String.valueOf(cal.get(Calendar.YEAR));
			String day = String.valueOf(cal.get(Calendar.DAY_OF_MONTH));
			
			cal.set(Calendar.DAY_OF_MONTH, 1);
			cal.set(Calendar.MONTH, 0);
			cal.set(Calendar.YEAR, 2021);
			String startDate = sdf.format(cal.getTime());
	
			// long totalPageView = 300000;
			// long newUsers = 5000;
			long totalPageView = Long.valueOf(portalService.getTotalPageView(viewId, startDate, endDate, service));
			long newUsers = Long.valueOf(portalService.getNewUsers(viewId, startDate, endDate, service));
			log.info("Total page views: " + totalPageView);
			log.info("New users: " + newUsers);

			//add to databse
			_dailyCounterLocalService.addDailyCounter(day, month, year, newUsers, totalPageView);
			System.out.println("Command finished");
		}
		catch(Exception e) {
			log.error(e);
		}
	}
	
	private volatile BibliotecaVisitorsCounterWebConfiguration _bibliotecaVisitorsCounterWebConfiguration;
    
    @Activate
    @Modified
    protected void activate(Map<String, Object> properties) {
    	_bibliotecaVisitorsCounterWebConfiguration = ConfigurableUtil.createConfigurable(
    			BibliotecaVisitorsCounterWebConfiguration.class, properties);
    }

    @Reference(unbind = "-")
    protected void setGuestbookService(DailyCounterLocalService monthlyCounterLocalService) {
    	_dailyCounterLocalService = monthlyCounterLocalService;
    }

    private DailyCounterLocalService _dailyCounterLocalService;
    
	private static Log log = LogFactoryUtil.getLog(BibliotecaVisitorsCounterWebCommand.class);
}
